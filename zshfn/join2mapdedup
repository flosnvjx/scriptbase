# vim:syntax=zsh
# join2mapdedup [options] <map> <nf:key> <join-by> <record4join>
function join2mapdedup {
  argv=(
  $'\t' # <fs>
  $'\v' # <subfs>
   ''   # <nf:subst>
   ''   # <nf:alterjoin>
   ''   # <nf:nodedup>
   ''   # tmp
   ''   # tmp2
  "${(@)argv}"
    )
  while ((#>7)); do case "${(P)$((7+1))}" in
    (-fs) ((#>7+1)) || return 128
          ((#$((7+2))==1)) || return 7
          1=${(P)$((7+2))}
          ((#>=$((7+2+4)))) || return 128
          argv=("${(@)argv[1,7]}" "${(@)argv[$((7+2+1)),-1]}")
          ;;
    (-subfs) ((#>7+1)) || return 128
          ((#$((7+2))==1)) || return 7
          2=${(P)$((7+2))}
          ((#>=$((7+2+4)))) || return 128
          argv=("${(@)argv[1,7]}" "${(@)argv[$((7+2+1)),-1]}")
          ;;
    (-nf:subst) ((#>7+1)) || return 128
          ((#$((7+2)))) || return 7
          3=${(P)$((7+2))}
          ((#>=$((7+2+4)))) || return 128
          argv=("${(@)argv[1,7]}" "${(@)argv[$((7+2+1)),-1]}")
          ;;
    (-nf:alterjoin) ((#>7+1)) || return 128
          ((#$((7+2)))) || return 7
          4=${(P)$((7+2))}
          ((#>=$((7+2+4)))) || return 128
          argv=("${(@)argv[1,7]}" "${(@)argv[$((7+2+1)),-1]}")
          ;;
    (-nf:nodedup) ((#>7+1)) || return 128
          ((#$((7+2)))) || return 7
          5=${(P)$((7+2))}
          ((#>=$((7+2+4)))) || return 128
          argv=("${(@)argv[1,7]}" "${(@)argv[$((7+2+1)),-1]}")
          ;;
    (-?*) return 128
          ;;
    (*)   break
          ;;
  esac; done
  ## fail-early
  ((#==7+4)) || return 128
  if [[ "$1" == "$2" ]] || \
  [[ "${(P)$((7+1))}" != [_A-Za-z][_0-9A-Za-z]# ]] || \
  [[ "${(P)$((7+2))}" != [1-9][0-9]# ]] || \
  [[ "${(P)$((7+3))}" != (append|prepend) ]]; then
    return 7
  fi

  ## reformat or failearly these opts
  for 7 in 3 4 5; do
    if ((#${7})); then
      function {
        [[ ${(@)argv[(I)^([1-9][0-9]#(|-[1-9][0-9]#))]} == 0 ]] || return 7
      } "${(Ps:,:@)7}" || return
    else
      continue
    fi
    6=$7
    for 7 in "${(Ps:,:)7}"; do
      if [[ "$7" == *'-'* ]]; then
        6=${6}'|<'${7}'>'
      else
        6=${6}'|'${7}
      fi
    done
    argv[${6%%'|'*}]='('${6#*'|'}')'
  done

  ## check-or-create the map before processing record, regardless if the record is empty
  if [[ -v "${(P)$((7+1))}" ]]; then
    if eval '[[ "${(t)'${(P)$((7+1))}'}" == *(scalar|array|integer|float|readonly|special)* ]]'; then
      return 8
    fi
    eval '[[ "${(t)'${(P)$((7+1))}'}" == association* ]]' || return 8
  else
    builtin declare -gA "${(P)$((7+1))}"
  fi
  ## fail if record is empty
  [[ ${(P)#$((7+4))} -ne 0 ]] || return 5

  ## set sep-delim for later eval
  for 7 in 1 2; do
    if [[ "${(P)7}" == '.' ]]; then
      argv[${7}]="${(P)7}:"
    else
      argv[${7}]="${(P)7}."
    fi
  done

  ## split the record by <fs>
  eval $((7+4+1))'=("${(@s'${1[2]}${1[1]}${1[2]}')'$((7+4))'}")'
  ## fail if nf < nf:key
  ((#-(7+4)>=${(P)$((7+2))})) || return 6

  ## first-stage find key
  6=
  for 7 in {1..$((#-(7+4)))}; do
    if [[ "$7" == ${(P)$((7+2))} ]]; then
      6=${(P)$((7+4+${7}))}
      break
    fi
  done
  ((#6)) || return 6

  ## dont touch nf==nf:key
  for 7 in {1..$((#-(7+4)))}; do if [[ "$7" != ${(P)$((7+2))} ]]; then
     ## nf!=nf:subst && actual_len($nf)>0
    if ((#3==0)) || eval '[[ "$7" != '$3' ]]' || eval '[[ ${(@)#${(@s'${2[2]}${2[1]}${2[2]}')argv[$((7+4+${7}))]}} == 0 ]]'; then
      if [[ "${(P)$((7+3))}" == append ]]; then
        if ((#4==0)) || eval '[[ "$7" != '$4' ]]'; then
          eval $((7+4+${7}))'="${(@)${(@s'${1[2]}${1[1]}${1[2]}')'${(P)$((7+1))}'[$6]}[$7]}"${(P)$((7+4+${7})):+${2[1]}}${(P)$((7+4+${7}))}'
        else
          eval $((7+4+${7}))'=${(P)$((7+4+${7}))}${(P)$((7+4+${7})):+${2[1]}}"${(@)${(@s'${1[2]}${1[1]}${1[2]}')'${(P)$((7+1))}'[$6]}[$7]}"'
        fi
      elif [[ "${(P)$((7+3))}" == prepend ]]; then
        if ((#4==0)) || eval '[[ "$7" != '$4' ]]'; then
          eval $((7+4+${7}))'=${(P)$((7+4+${7}))}${(P)$((7+4+${7})):+${2[1]}}"${(@)${(@s'${1[2]}${1[1]}${1[2]}')'${(P)$((7+1))}'[$6]}[$7]}"'
        else
          eval $((7+4+${7}))'="${(@)${(@s'${1[2]}${1[1]}${1[2]}')'${(P)$((7+1))}'[$6]}[$7]}"${(P)$((7+4+${7})):+${2[1]}}${(P)$((7+4+${7}))}'
        fi
      else return 44
      fi
    fi
    ## nf==nf:nodedup
    if ((#5)) && eval '[[ "$7" == '$5' ]]'; then
      eval $((7+4+${7}))'=${(j'${2[2]}${2[1]}${2[2]}')${(s'${2[2]}${2[1]}${2[2]}')'$((7+4+${7}))'}}'
    else
      eval $((7+4+${7}))'=${(j'${2[2]}${2[1]}${2[2]}')${(s'${2[2]}${2[1]}${2[2]}'u)'$((7+4+${7}))'}}'
    fi
  fi; done

  ## complement extra fields from map[key] if nf:map[key] > nf:record
  if eval '(("${(@)#${(@s'${1[2]}${1[1]}${1[2]}')'${(P)$((7+1))}'[$6]}}">#-(7+4) ? (argv[7]="${(@)#${(@s'${1[2]}${1[1]}${1[2]}')'${(P)$((7+1))}'[$6]}}") : 0))'; then for 7 in {$((#-(7+4)+1))..$7}; do
    eval $((7+4+${7}))'="${(@)${(@s'${1[2]}${1[1]}${1[2]}')'${(P)$((7+1))}'[$6]}[$7]}"'
    if ((#5)) && eval '[[ "$7" == '$5' ]]'; then
      eval $((7+4+${7}))'=${(j'${2[2]}${2[1]}${2[2]}')${(s'${2[2]}${2[1]}${2[2]}')'$((7+4+${7}))'}}'
    else
      eval $((7+4+${7}))'=${(j'${2[2]}${2[1]}${2[2]}')${(s'${2[2]}${2[1]}${2[2]}'u)'$((7+4+${7}))'}}'
    fi
  done; fi

  eval ${(P)$((7+1))}'[$6]="${(@j'${1[2]}${1[1]}${1[2]}')argv[$((7+4+1)),-1]}"'
}
