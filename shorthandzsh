#!/usr/bin/env -S zsh -f
if [[ "$ZSH_ARGZERO" != /*/shorthandzsh ]]; then
  exit 128
fi

## zshoptions
setopt cdsilent
setopt posixcd
setopt extendedglob
setopt errexit errreturn
setopt pipefail
unsetopt banghist
setopt warncreateglobal
if [[ "${options[interactive]}" == off ]]; then
  unsetopt monitor
fi
if [[ "$TERM" != dumb ]] && [[ -n "$TERM" ]]; then
  setopt emacs && function {
    # Make sure that the terminal is in application mode when zle is active, since only then values from $terminfo are valid
    if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )) {
      function zle-line-init() {
        builtin echoti smkx
      }
      function zle-line-finish() {
        builtin echoti rmkx
      }
      builtin zle -N zle-line-init
      builtin zle -N zle-line-finish
    }
    # [PageUp] - Up a line of history
    if [[ -n "${terminfo[kpp]}" ]] {
      builtin bindkey -M emacs "${terminfo[kpp]}" up-line-or-history
    }
    # [PageDown] - Down a line of history
    if [[ -n "${terminfo[knp]}" ]] {
      builtin bindkey -M emacs "${terminfo[knp]}" down-line-or-history
    }
    # Start typing + [Up-Arrow] - fuzzy find history forward
    if [[ -n "${terminfo[kcuu1]}" ]] {
      builtin autoload -U up-line-or-beginning-search
      builtin zle -N up-line-or-beginning-search
      builtin bindkey -M emacs "${terminfo[kcuu1]}" up-line-or-beginning-search
    }
    # Start typing + [Down-Arrow] - fuzzy find history backward
    if [[ -n "${terminfo[kcud1]}" ]] {
      builtin autoload -U down-line-or-beginning-search
      builtin zle -N down-line-or-beginning-search
      builtin bindkey -M emacs "${terminfo[kcud1]}" down-line-or-beginning-search
    }
    # [Home] - Go to beginning of line
    if [[ -n "${terminfo[khome]}" ]] {
      builtin bindkey -M emacs "${terminfo[khome]}" beginning-of-line
    }
    # [End] - Go to end of line
    if [[ -n "${terminfo[kend]}" ]] {
      builtin bindkey -M emacs "${terminfo[kend]}"  end-of-line
    }
    # [Delete] - delete forward
    if [[ -n "${terminfo[kdch1]}" ]] {
      builtin bindkey -M emacs "${terminfo[kdch1]}" delete-char
    }
    builtin bindkey '^I' expand-word
    builtin zstyle -e ':completion::complete:-value-*:*' use-compctl 'reply=no'
  }
else
  unset zle_bracketed_paste
fi

## zshmisc
alias printj='builtin printf %s'
alias say='builtin print -r --'
alias call='function { ((#>1)); 0=$argv[1]; shift; [[ -n "$argv[1]" ]]; [[ ${(@)${(@k)aliases}[(Ie)${argv[1]}]} -eq 0 ]]; [[ ${(@)${(@k)functions}[(Ie)${argv[1]}]} -ne 0 ]]; "${(@)argv}" } "$0"'

alias rg='command rg --no-config'

### autoload
local +x -a zshfns=(${ZSH_ARGZERO%/*}/zshfn/*(.N))
if [[ ${#zshfns} -gt 0 ]]; then
  builtin autoload -kr -- $zshfns
fi

### modules
builtin zmodload -Fa zsh/zutil b:zparseopts

### trap
trap '__=$ZSH_DEBUG_CMD' DEBUG
if [[ -t 2 ]]; then
  local traperr='builtin print -rP -- "${zsh_eval_context[-2]}: %F{white}${${0##*/}//\%/%%}%f exited with %B%F{red}[${(j.|.)pipestatus}]%f%b on command:
  ${__//\%/%%}
%% -- in L${funcfiletrace[1]##*:}, ${${${funcfiletrace[1]#$PWD/}//\%/%%}%:*} (\$PWD: ${PWD//\%/%%})" >&2'
else
  local traperr='builtin print -r -- "${zsh_eval_context[-2]}: ${0##*/} exited with [${(j.|.)pipestatus}], on ${(q)__} -- in L${funcfiletrace[1]##*:}, ${${funcfiletrace[1]#$PWD/}%:*} (\$PWD: ${PWD})" >&2'
fi
trap $traperr ZERR
unset traperr

## --
ZSH_ARGZERO=$1
0=$1
shift
source "$ZSH_ARGZERO" "${(@)argv}"
